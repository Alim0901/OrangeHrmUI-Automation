name: Playwright-CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  schedule:
    - cron: '20 7 * * *'  # 4:15 PM AEST
  workflow_dispatch:      # ✅ Add this to allow manual trigger
permissions:
  contents: read
  pull-requests: write

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        tag: ["@smoke"]

    steps:
      # 1️⃣ Checkout code
      - uses: actions/checkout@v4

      # 2️⃣ Set up Java 24
      - uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '24-ea'
          check-latest: true

      # 3️⃣ Cache Maven repository
      - uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      # 4️⃣ Cache Playwright binaries
      - uses: actions/cache@v4
        with:
          path: ~/.cache/ms-playwright
          key: playwright-${{ runner.os }}

      # 5️⃣ Install Playwright browsers and dependencies
      - name: Install Playwright browsers and dependencies
        run: npx playwright install --with-deps

      - name: Check CPU and Java Info
        run: |
          echo "CPU cores available: $(nproc)"
          java -version

      # 6️⃣ Run tests by tag and generate Allure report
      - name: Run tests by tag
        run: mvn verify -Dcucumber.filter.tags="${{ matrix.tag }}"

      # 7️⃣ Upload Allure HTML report as artifact
      - name: Archive Allure HTML report
        uses: actions/upload-artifact@v4
        with:
          name: allure-html-${{ matrix.tag }}
          path: target/site/allure-maven-plugin

  publish-pages:
    needs: test
    if: github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    permissions:
      pages: write
      id-token: write

    steps:
      # 1️⃣ Download Allure HTML report artifact
      - name: Download Allure HTML report artifact
        uses: actions/download-artifact@v4
        with:
          path: temp-allure

      - name: Debug downloaded artifact
        run: ls -R temp-allure

      - name: Clean public folder
        run: rm -rf public/* || true

      - name: Move report files to public
        run: |
          mkdir -p public
          mv temp-allure/allure-html-*/** public/

      - name: Debug public folder
        run: ls -R public

        # 2️⃣ Configure GitHub Pages
      - uses: actions/configure-pages@v5

      # 3️⃣ Upload pages artifact
      - uses: actions/upload-pages-artifact@v3
        with:
          path: public

      # 4️⃣ Deploy to GitHub Pages
      - uses: actions/deploy-pages@v4

      # 5️⃣ Comment PR with report link
      - name: Comment with report link
        if: ${{ github.event_name == 'pull_request' }}
        uses: thollander/actions-comment-pull-request@v2
        with:
          message: |
            ✅ **Allure Report is Ready!**
            🔗 [View Allure Report](https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/)

  slack-notification:
    needs: publish-pages
    runs-on: ubuntu-latest

    steps:
      # Checkout code (to access test result files)
      - uses: actions/checkout@v4

      # Download Allure artifact
      - uses: actions/download-artifact@v4
        with:
          name: allure-html-@smoke
          path: allure-report

      - name: Extract test metadata
        id: metadata
        run: |
          summary_file="allure-report/widgets/summary.json"
          if [ -f "$summary_file" ]; then
            passed=$(jq '.statistic.passed' $summary_file)
            failed=$(jq '.statistic.failed' $summary_file)
            skipped=$(jq '.statistic.skipped' $summary_file)
            total=$(jq '.statistic.total' $summary_file)
          else
            passed=0
            failed=0
            skipped=0
            total=0
          fi

          echo "passed=$passed" >> $GITHUB_OUTPUT
          echo "failed=$failed" >> $GITHUB_OUTPUT
          echo "skipped=$skipped" >> $GITHUB_OUTPUT
          echo "total=$total" >> $GITHUB_OUTPUT

      - name: Notify Slack
        run: |
          curl -X POST -H 'Content-type: application/json' \
          --data "{
            \"text\": \"✅ *Test Report Summary*\n• Total: ${{ steps.metadata.outputs.total }}\n• Passed: ${{ steps.metadata.outputs.passed }}\n• Failed: ${{ steps.metadata.outputs.failed }}\n• Skipped: ${{ steps.metadata.outputs.skipped }}\n📄 Report: <https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/>\"
          }" ${{ secrets.SLACK_WEBHOOK_URL }}
